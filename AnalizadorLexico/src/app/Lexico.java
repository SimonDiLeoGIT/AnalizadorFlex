// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: D:/Documentos/UNLU/2023/Segundo Cuatrimestre/TEO I/TP Compilador/AnalizadorFlex/Lexico.flex

package app;
import java_cup.runtime.*;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.*;


@SuppressWarnings("fallthrough")
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\2\1\1\0\2\1\22\0\1\1\1\2\3\0"+
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\3\21\1\22"+
    "\3\21\1\23\1\24\1\25\1\26\1\27\2\0\1\30"+
    "\2\31\1\32\1\33\1\34\1\35\1\36\1\37\2\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\40\1\46\1\47"+
    "\1\50\2\40\1\51\3\40\1\52\1\0\1\53\1\54"+
    "\1\55\1\0\1\56\2\40\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\2\40\1\65\1\66\1\67\1\70\1\71"+
    "\1\40\1\72\1\73\1\74\2\40\1\75\3\40\1\76"+
    "\1\77\1\100\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\11\24\1\25\1\26"+
    "\1\27\10\24\1\30\1\1\1\31\1\0\1\32\2\0"+
    "\1\33\2\0\1\34\1\35\1\36\1\37\1\0\6\24"+
    "\1\40\16\24\1\41\4\0\2\24\1\42\17\24\1\42"+
    "\1\24\2\0\1\2\1\24\1\43\21\24\1\0\1\44"+
    "\2\24\1\45\7\24\1\46\1\47\3\24\1\50\1\51"+
    "\3\24\1\52\1\24\1\53\3\24\1\54\1\55\3\24"+
    "\1\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\101\0\101\0\101\0\303\0\u0104"+
    "\0\101\0\101\0\101\0\101\0\101\0\u0145\0\u0186\0\u01c7"+
    "\0\101\0\101\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d"+
    "\0\u038e\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\101\0\101"+
    "\0\101\0\u0514\0\u0555\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a"+
    "\0\u06db\0\101\0\u071c\0\101\0\303\0\101\0\u075d\0\u079e"+
    "\0\u0145\0\u07df\0\u0820\0\101\0\101\0\101\0\101\0\u0861"+
    "\0\u08a2\0\u08e3\0\u0924\0\u0965\0\u09a6\0\u09e7\0\u02cb\0\u0a28"+
    "\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0c30"+
    "\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\101\0\u0db6\0\u0df7"+
    "\0\u0e38\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff"+
    "\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6\0\u1207"+
    "\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f"+
    "\0\101\0\u1450\0\u02cb\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595"+
    "\0\u15d6\0\u1617\0\u1658\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d"+
    "\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2\0\101\0\u1923\0\u1964"+
    "\0\u02cb\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b"+
    "\0\u02cb\0\u02cb\0\u1b6c\0\u1bad\0\u1bee\0\101\0\u02cb\0\u1c2f"+
    "\0\u1c70\0\u1cb1\0\u02cb\0\u1cf2\0\u02cb\0\u1d33\0\u1d74\0\u1db5"+
    "\0\u02cb\0\u02cb\0\u1df6\0\u1e37\0\u1e78\0\u02cb";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\5\20\1\21"+
    "\1\22\1\23\1\24\1\25\2\26\1\27\1\30\1\31"+
    "\2\26\1\32\2\26\1\33\2\26\1\34\1\26\1\35"+
    "\1\26\1\36\1\37\1\40\1\41\1\2\1\26\1\42"+
    "\1\43\1\44\2\26\1\45\1\26\1\46\2\26\1\47"+
    "\1\26\1\50\1\26\1\51\1\52\1\53\1\54\102\0"+
    "\1\3\100\0\1\55\3\0\1\56\10\0\5\55\5\0"+
    "\22\55\4\0\20\55\21\0\2\57\3\60\5\0\5\60"+
    "\62\0\5\61\66\0\1\62\104\0\1\61\1\0\5\20"+
    "\73\0\1\63\10\0\1\64\1\65\77\0\1\66\100\0"+
    "\1\67\70\0\5\26\5\0\22\26\3\0\1\70\20\26"+
    "\21\0\5\26\5\0\3\26\1\71\16\26\3\0\1\70"+
    "\20\26\21\0\5\26\5\0\11\26\1\72\1\26\1\73"+
    "\6\26\3\0\1\70\7\26\1\74\10\26\21\0\5\26"+
    "\5\0\11\26\1\75\10\26\3\0\1\70\7\26\1\76"+
    "\10\26\21\0\5\26\5\0\4\26\1\77\6\26\1\100"+
    "\6\26\3\0\1\70\3\26\1\77\5\26\1\101\6\26"+
    "\21\0\5\26\5\0\7\26\1\102\12\26\3\0\1\70"+
    "\6\26\1\103\11\26\21\0\5\26\5\0\16\26\1\104"+
    "\3\26\3\0\1\70\20\26\21\0\5\26\5\0\20\26"+
    "\1\105\1\26\3\0\1\70\16\26\1\106\1\26\21\0"+
    "\5\26\5\0\6\26\1\107\7\26\1\110\3\26\3\0"+
    "\1\70\5\26\1\111\6\26\1\112\3\26\21\0\5\26"+
    "\5\0\22\26\3\0\1\70\2\26\1\113\15\26\21\0"+
    "\5\26\5\0\22\26\3\0\1\70\7\26\1\74\1\26"+
    "\1\114\6\26\21\0\5\26\5\0\22\26\3\0\1\70"+
    "\7\26\1\76\10\26\21\0\5\26\5\0\22\26\3\0"+
    "\1\70\3\26\1\77\5\26\1\101\6\26\21\0\5\26"+
    "\5\0\22\26\3\0\1\70\6\26\1\103\11\26\21\0"+
    "\5\26\5\0\22\26\3\0\1\70\14\26\1\115\3\26"+
    "\21\0\5\26\5\0\22\26\3\0\1\70\16\26\1\106"+
    "\1\26\21\0\5\26\5\0\22\26\3\0\1\70\5\26"+
    "\1\111\6\26\1\112\3\26\102\0\1\116\13\0\1\117"+
    "\3\0\2\57\3\60\5\0\5\60\56\0\1\120\3\0"+
    "\5\60\5\0\5\60\44\0\10\62\1\121\70\62\15\63"+
    "\1\122\63\63\16\0\5\26\5\0\22\26\4\0\20\26"+
    "\21\0\5\26\5\0\4\26\1\123\15\26\3\0\1\70"+
    "\20\26\21\0\5\26\5\0\17\26\1\124\2\26\3\0"+
    "\1\70\20\26\21\0\5\26\5\0\2\26\1\125\17\26"+
    "\3\0\1\70\20\26\21\0\5\26\5\0\22\26\3\0"+
    "\1\70\15\26\1\126\2\26\21\0\5\26\5\0\14\26"+
    "\1\127\5\26\3\0\1\70\20\26\21\0\5\26\5\0"+
    "\22\26\3\0\1\70\12\26\1\130\5\26\21\0\5\26"+
    "\5\0\20\26\1\131\1\26\3\0\1\70\20\26\21\0"+
    "\5\26\5\0\22\26\3\0\1\70\16\26\1\132\1\26"+
    "\21\0\5\26\5\0\2\26\1\133\17\26\3\0\1\70"+
    "\20\26\21\0\5\26\5\0\22\26\3\0\1\70\1\26"+
    "\1\134\16\26\21\0\5\26\5\0\14\26\1\135\5\26"+
    "\3\0\1\70\20\26\21\0\5\26\5\0\16\26\1\136"+
    "\3\26\3\0\1\70\20\26\21\0\5\26\5\0\22\26"+
    "\3\0\1\70\14\26\1\137\3\26\21\0\5\26\5\0"+
    "\7\26\1\140\12\26\3\0\1\70\20\26\21\0\5\26"+
    "\5\0\7\26\1\141\12\26\3\0\1\70\20\26\21\0"+
    "\5\26\5\0\22\26\3\0\1\70\6\26\1\142\11\26"+
    "\21\0\5\26\5\0\22\26\3\0\1\70\6\26\1\143"+
    "\11\26\21\0\5\26\5\0\22\26\3\0\1\70\3\26"+
    "\1\144\14\26\21\0\5\26\5\0\22\26\3\0\1\70"+
    "\1\26\1\145\16\26\21\0\5\26\5\0\22\26\3\0"+
    "\1\70\12\26\1\146\5\26\22\0\1\147\1\150\77\0"+
    "\1\147\61\0\10\62\1\121\4\62\1\151\63\62\15\63"+
    "\1\122\11\63\1\151\51\63\16\0\5\26\5\0\7\26"+
    "\1\152\12\26\3\0\1\70\20\26\21\0\5\26\5\0"+
    "\3\26\1\153\16\26\3\0\1\70\20\26\21\0\5\26"+
    "\5\0\2\26\1\154\17\26\3\0\1\70\20\26\21\0"+
    "\5\26\5\0\22\26\3\0\1\70\2\26\1\153\15\26"+
    "\21\0\5\26\5\0\1\155\21\26\3\0\1\70\20\26"+
    "\21\0\5\26\5\0\22\26\3\0\1\70\1\156\17\26"+
    "\21\0\5\26\5\0\3\26\1\157\16\26\3\0\1\70"+
    "\20\26\21\0\5\26\5\0\22\26\3\0\1\70\2\26"+
    "\1\160\15\26\21\0\5\26\5\0\2\26\1\161\17\26"+
    "\3\0\1\70\20\26\21\0\5\26\5\0\22\26\3\0"+
    "\1\70\1\26\1\162\16\26\21\0\5\26\5\0\5\26"+
    "\1\163\14\26\3\0\1\70\20\26\21\0\5\26\5\0"+
    "\7\26\1\164\12\26\3\0\1\70\20\26\21\0\5\26"+
    "\5\0\22\26\3\0\1\70\6\26\1\165\11\26\21\0"+
    "\5\26\5\0\11\26\1\166\10\26\3\0\1\70\20\26"+
    "\21\0\5\26\5\0\20\26\1\167\1\26\3\0\1\70"+
    "\20\26\21\0\5\26\5\0\22\26\3\0\1\70\7\26"+
    "\1\170\10\26\21\0\5\26\5\0\22\26\3\0\1\70"+
    "\16\26\1\171\1\26\21\0\5\26\5\0\22\26\3\0"+
    "\1\70\6\26\1\172\11\26\21\0\5\26\5\0\22\26"+
    "\3\0\1\70\1\26\1\173\16\26\21\0\5\26\5\0"+
    "\22\26\3\0\1\70\4\26\1\174\13\26\25\0\1\175"+
    "\65\0\1\176\107\0\5\26\5\0\13\26\1\177\6\26"+
    "\3\0\1\70\20\26\21\0\5\26\5\0\3\26\1\200"+
    "\16\26\3\0\1\70\20\26\21\0\5\26\5\0\20\26"+
    "\1\201\1\26\3\0\1\70\20\26\21\0\5\26\5\0"+
    "\22\26\3\0\1\70\16\26\1\201\1\26\21\0\5\26"+
    "\5\0\5\26\1\202\14\26\3\0\1\70\20\26\21\0"+
    "\5\26\5\0\22\26\3\0\1\70\4\26\1\203\13\26"+
    "\21\0\5\26\5\0\11\26\1\204\10\26\3\0\1\70"+
    "\20\26\21\0\5\26\5\0\22\26\3\0\1\70\7\26"+
    "\1\205\10\26\21\0\5\26\5\0\16\26\1\206\3\26"+
    "\3\0\1\70\20\26\21\0\5\26\5\0\13\26\1\207"+
    "\6\26\3\0\1\70\20\26\21\0\5\26\5\0\22\26"+
    "\3\0\1\70\11\26\1\210\6\26\21\0\5\26\5\0"+
    "\3\26\1\211\16\26\3\0\1\70\20\26\21\0\5\26"+
    "\5\0\3\26\1\212\16\26\3\0\1\70\20\26\21\0"+
    "\5\26\5\0\22\26\3\0\1\70\2\26\1\211\15\26"+
    "\21\0\5\26\5\0\22\26\3\0\1\70\2\26\1\212"+
    "\15\26\21\0\5\26\5\0\22\26\3\0\1\70\11\26"+
    "\1\213\6\26\21\0\5\26\5\0\22\26\3\0\1\70"+
    "\2\26\1\214\15\26\21\0\5\26\5\0\22\26\3\0"+
    "\1\70\14\26\1\215\3\26\12\0\1\216\107\0\5\26"+
    "\5\0\3\26\1\217\16\26\3\0\1\70\20\26\21\0"+
    "\5\26\5\0\4\26\1\220\15\26\3\0\1\70\20\26"+
    "\21\0\5\26\5\0\3\26\1\221\16\26\3\0\1\70"+
    "\20\26\21\0\5\26\5\0\22\26\3\0\1\70\2\26"+
    "\1\222\15\26\21\0\5\26\5\0\3\26\1\223\16\26"+
    "\3\0\1\70\20\26\21\0\5\26\5\0\22\26\3\0"+
    "\1\70\2\26\1\223\15\26\21\0\5\26\5\0\1\224"+
    "\21\26\3\0\1\70\20\26\21\0\5\26\5\0\5\26"+
    "\1\225\14\26\3\0\1\70\20\26\21\0\5\26\5\0"+
    "\22\26\3\0\1\70\4\26\1\225\13\26\21\0\5\26"+
    "\5\0\22\26\3\0\1\70\2\26\1\217\15\26\21\0"+
    "\5\26\5\0\22\26\3\0\1\70\3\26\1\226\14\26"+
    "\21\0\5\26\5\0\22\26\3\0\1\70\1\227\17\26"+
    "\21\0\5\26\5\0\7\26\1\230\12\26\3\0\1\70"+
    "\20\26\21\0\5\26\5\0\16\26\1\231\3\26\3\0"+
    "\1\70\20\26\21\0\5\26\5\0\22\26\3\0\1\70"+
    "\14\26\1\231\3\26\21\0\5\26\5\0\12\26\1\232"+
    "\7\26\3\0\1\70\20\26\21\0\5\26\5\0\22\26"+
    "\3\0\1\70\6\26\1\233\11\26\21\0\5\26\5\0"+
    "\22\26\3\0\1\70\10\26\1\232\7\26\21\0\5\26"+
    "\5\0\13\26\1\234\6\26\3\0\1\70\20\26\21\0"+
    "\5\26\5\0\22\26\3\0\1\70\11\26\1\235\6\26"+
    "\21\0\5\26\5\0\3\26\1\236\16\26\3\0\1\70"+
    "\20\26\21\0\5\26\5\0\22\26\3\0\1\70\2\26"+
    "\1\236\15\26\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7865];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\3\11\2\1\5\11\3\1\2\11"+
    "\14\1\3\11\10\1\1\11\1\1\1\11\1\0\1\11"+
    "\2\0\1\1\2\0\4\11\1\0\25\1\1\11\4\0"+
    "\24\1\2\0\1\11\23\1\1\0\1\11\17\1\1\11"+
    "\20\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private ArrayList<String> lista = new ArrayList<>();
    private ArrayList<SymbolTableEntry> tsEntries = new ArrayList<>();
    private PrintWriter writer = null;

    public Lexico(java.io.Reader in, String filePath) {
        this.zzReader = in;
        try {
            File file = new File(filePath);
            file.createNewFile();
            writer = new PrintWriter(new FileWriter(filePath));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    public ArrayList getList() {
        return this.lista;
    }

    public void vaciarLista() {
        this.lista.clear();
    }

    public void agregarATablaDeSimbolos(String token, String valor) {
        boolean existe = false;
        for (SymbolTableEntry entrada : tsEntries) {
            if (entrada.getToken().equals(token) && ((entrada.getNombre().equals(valor)) || (entrada.getNombre().equals("_" + valor)))) {
                existe = true;
            }
        }

        if (!existe) tsEntries.add(new SymbolTableEntry(valor, token));
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    if (writer != null) {
    	String header = String.format("%-25s | %-15s | %-10s | %-25s |%-5s", "NOMBRE", "TOKEN", "TIPO", "VALOR", "LONGITUD");
    	writer.println(header);
    	for(SymbolTableEntry entryInstance: tsEntries) {
    		String entry = entryInstance.getEntry();
    		writer.println(entry);
    	}
        
        writer.close();
    }
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
 * @throws Exception 
   */
  @Override  public java_cup.runtime.Symbol next_token() throws Exception
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return null; }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Exception("Caracter no permitido: <" + yytext() + "> en la linea: " + (yyline + 1) + " columna: " + (yycolumn + 1));
            }
          // fall through
          case 47: break;
          case 2:
            { /* no se realiza accion por lo tanto se ignoran*/
            }
          // fall through
          case 48: break;
          case 3:
            { System.out.println("Token OP_NOT, encontrado Lexema "+ yytext());
    lista.add("Token OP_NOT, encontrado Lexema "+ yytext());
            }
          // fall through
          case 49: break;
          case 4:
            { System.out.println("Token OP_MOD encontrado, Lexema "+ yytext());
    lista.add("Token OP_MOD, encontrado Lexema "+ yytext());
            }
          // fall through
          case 50: break;
          case 5:
            { System.out.println("Token OP_AND, encontrado Lexema "+ yytext());
    lista.add("Token OP_AND, encontrado Lexema "+ yytext());
            }
          // fall through
          case 51: break;
          case 6:
            { System.out.println("Token PAREN_OPEN, encontrado Lexema "+ yytext());
    lista.add("Token PAREN_OPEN, encontrado Lexema "+ yytext());
            }
          // fall through
          case 52: break;
          case 7:
            { System.out.println("Token PAREN_CLOSE, encontrado Lexema "+ yytext());
    lista.add("Token PAREN_CLOSE, encontrado Lexema "+ yytext());
            }
          // fall through
          case 53: break;
          case 8:
            { System.out.println("Token OP_MULT encontrado, Lexema "+ yytext());
    lista.add("Token OP_MULT, encontrado Lexema "+ yytext());
            }
          // fall through
          case 54: break;
          case 9:
            { System.out.println("Token OP_SUMA encontrado, Lexema "+ yytext());
    lista.add("Token OP_SUMA, encontrado Lexema "+ yytext());
            }
          // fall through
          case 55: break;
          case 10:
            { System.out.println("Token COMA, encontrado Lexema "+ yytext());
    lista.add("Token COMA, encontrado Lexema "+ yytext());
            }
          // fall through
          case 56: break;
          case 11:
            { System.out.println("Token OP_RESTA encontrado, Lexema "+ yytext());
    lista.add("Token OP_RESTA, encontrado Lexema "+ yytext());
            }
          // fall through
          case 57: break;
          case 12:
            { System.out.println("Token PUNTO, encontrado Lexema "+ yytext());
    lista.add("Token PUNTO, encontrado Lexema "+ yytext());
            }
          // fall through
          case 58: break;
          case 13:
            { System.out.println("Token OP_DIV encontrado, Lexema "+ yytext());
    lista.add("Token OP_DIV, encontrado Lexema "+ yytext());
            }
          // fall through
          case 59: break;
          case 14:
            { System.out.println("Token CONST_INT, encontrado Lexema "+ yytext()); 
    /* Verificación de rango de constante entera */
    if((Integer.parseInt(yytext()) >= 0) && (Integer.parseInt(yytext()) <= 65535)){
        agregarATablaDeSimbolos("CONST_INT", yytext());
        lista.add("Token CONST_INT, encontrado Lexema "+ yytext());
    } else {
        throw new Exception(
            "Constante entera fuera de rango: <" + yytext() + "> en la linea: " + (yyline + 1) + " columna: " + (yycolumn + 1)
        );
    }
            }
          // fall through
          case 60: break;
          case 15:
            { System.out.println("Token DOS_PUNTOS, encontrado Lexema "+ yytext());
    lista.add("Token DOS_PUNTOS, encontrado Lexema "+ yytext());
            }
          // fall through
          case 61: break;
          case 16:
            { System.out.println("Token PUNTO_COMA, encontrado Lexema "+ yytext());
    lista.add("Token PUNTO_COMA, encontrado Lexema "+ yytext());
            }
          // fall through
          case 62: break;
          case 17:
            { System.out.println("Token OP_MEN encontrado, Lexema "+ yytext());
    lista.add("Token OP_MEN, encontrado Lexema "+ yytext());
            }
          // fall through
          case 63: break;
          case 18:
            { System.out.println("Token OP_ASIGN encontrado, Lexema: "+ yytext());
    lista.add("Token OP_ASIGN, encontrado Lexema "+ yytext());
            }
          // fall through
          case 64: break;
          case 19:
            { System.out.println("Token OP_MAY encontrado, Lexema "+ yytext());
    lista.add("Token OP_MAY, encontrado Lexema "+ yytext());
            }
          // fall through
          case 65: break;
          case 20:
            { lista.add("Token ID, encontrado Lexema "+ yytext());
    System.out.println("Token ID, encontrado Lexema "+ yytext()); 
    agregarATablaDeSimbolos("ID", yytext());
            }
          // fall through
          case 66: break;
          case 21:
            { System.out.println("Token BRACK_OPEN, encontrado Lexema "+ yytext());
    lista.add("Token BRACK_OPEN, encontrado Lexema "+ yytext());
            }
          // fall through
          case 67: break;
          case 22:
            { System.out.println("Token BRACK_CLOSE, encontrado Lexema "+ yytext());
    lista.add("Token BRACK_CLOSE, encontrado Lexema "+ yytext());
            }
          // fall through
          case 68: break;
          case 23:
            { System.out.println("Token OP_POT encontrado, Lexema "+ yytext());
    lista.add("Token OP_POT, encontrado Lexema "+ yytext());
            }
          // fall through
          case 69: break;
          case 24:
            { System.out.println("Token BLOCK_BEG, encontrado Lexema "+ yytext());
    lista.add("Token BLOCK_BEG, encontrado Lexema "+ yytext());
            }
          // fall through
          case 70: break;
          case 25:
            { System.out.println("Token BLOCK_END, encontrado Lexema "+ yytext());
    lista.add("Token BLOCK_END, encontrado Lexema "+ yytext());
            }
          // fall through
          case 71: break;
          case 26:
            { System.out.println("Token CONST_STR, encontrado Lexema "+ yytext()); 
    /* Verificación de longitud de cadena de texto */
    if(yytext().length() <= 30){
        agregarATablaDeSimbolos("CONST_STR", yytext());
        lista.add("Token CONST_STR, encontrado Lexema "+ yytext()); 
    } else {
        throw new Exception(
            "Constante string fuera de rango: <" + yytext() + "> en la linea: " + (yyline + 1) + " columna: " + (yycolumn + 1)
        );
    }
            }
          // fall through
          case 72: break;
          case 27:
            { System.out.println("Token CONST_DOU, encontrado Lexema "+ yytext()); 
    /* Verificación de rango de constante real */
    if((Double.parseDouble(yytext()) >= 0) && (Double.parseDouble(yytext()) <= 4294967295.0)){
        agregarATablaDeSimbolos("CONST_DOU", yytext());
        lista.add("Token CONST_DOU, encontrado Lexema "+ yytext());
    } else {
        throw new Exception(
            "Constante real fuera de rango: <" + yytext() + "> en la linea: " + (yyline + 1) + " columna: " + (yycolumn + 1)
        );
    }
            }
          // fall through
          case 73: break;
          case 28:
            { System.out.println("Token OP_MEN_IG encontrado, Lexema "+ yytext());
    lista.add("Token OP_MEN_IG, encontrado Lexema "+ yytext());
            }
          // fall through
          case 74: break;
          case 29:
            { System.out.println("Token OP_DIST, Lexema "+ yytext());
    lista.add("Token OP_DIST, encontrado Lexema "+ yytext());
            }
          // fall through
          case 75: break;
          case 30:
            { lista.add("Token OP_IG, encontrado Lexema "+ yytext());
    System.out.println("Token OP_IG, encontrado Lexema "+ yytext());
            }
          // fall through
          case 76: break;
          case 31:
            { System.out.println("Token OP_MAY_IG encontrado, Lexema "+ yytext());
    lista.add("Token OP_MAY_IG, encontrado Lexema "+ yytext());
            }
          // fall through
          case 77: break;
          case 32:
            { System.out.println("Token IF, encontrado Lexema "+ yytext());
    lista.add("Token IF, encontrado Lexema "+ yytext());
            }
          // fall through
          case 78: break;
          case 33:
            { System.out.println("Token OP_OR, encontrado Lexema "+ yytext());
    lista.add("Token OP_OR, encontrado Lexema "+ yytext());
            }
          // fall through
          case 79: break;
          case 34:
            { System.out.println("Token PROGRAM_END, encontrado Lexema "+ yytext());
    lista.add("Token PROGRAM_END, encontrado Lexema "+ yytext());
            }
          // fall through
          case 80: break;
          case 35:
            { System.out.println("Token ELSE, encontrado Lexema "+ yytext());
    lista.add("Token ELSE, encontrado Lexema "+ yytext());
            }
          // fall through
          case 81: break;
          case 36:
            { System.out.println("Token CONST_BIN, encontrado Lexema "+ yytext()); 
    agregarATablaDeSimbolos("CONST_BIN", yytext());
    lista.add("Token CONST_BIN, encontrado Lexema "+ yytext());
            }
          // fall through
          case 82: break;
          case 37:
            { System.out.println("Token FLOAT, encontrado Lexema "+ yytext()); 
    lista.add("Token FLOAT, encontrado Lexema "+ yytext());
            }
          // fall through
          case 83: break;
          case 38:
            { System.out.println("Token WHILE, encontrado Lexema "+ yytext());
    lista.add("Token WHILE, encontrado Lexema "+ yytext());
            }
          // fall through
          case 84: break;
          case 39:
            { System.out.println("Token WRITE, encontrado Lexema "+ yytext());
    lista.add("Token WRITE, encontrado Lexema "+ yytext());
            }
          // fall through
          case 85: break;
          case 40:
            { System.out.println("Token CONST_HEX, encontrado Lexema "+ yytext()); 
    agregarATablaDeSimbolos("CONST_HEX", yytext());
    lista.add("Token CONST_HEX, encontrado Lexema "+ yytext());
            }
          // fall through
          case 86: break;
          case 41:
            { System.out.println("Token DEFINE, encontrado Lexema "+ yytext());
    lista.add("Token DEFINE, encontrado Lexema "+ yytext());
            }
          // fall through
          case 87: break;
          case 42:
            { System.out.println("Token MIDDLE, encontrado Lexema "+ yytext());
    lista.add("Token MIDDLE, encontrado Lexema "+ yytext());
            }
          // fall through
          case 88: break;
          case 43:
            { System.out.println("Token STRING, encontrado Lexema "+ yytext());
    lista.add("Token STRING, encontrado Lexema "+ yytext());
            }
          // fall through
          case 89: break;
          case 44:
            { System.out.println("Token INTEGER, encontrado Lexema "+ yytext()); 
    lista.add("Token INTEGER, encontrado Lexema "+ yytext());
            }
          // fall through
          case 90: break;
          case 45:
            { System.out.println("Token PROGRAM_BEGIN, encontrado Lexema "+ yytext());
    lista.add("Token PROGRAM_BEGIN, encontrado Lexema "+ yytext());
            }
          // fall through
          case 91: break;
          case 46:
            { System.out.println("Token DEFINE_END, encontrado Lexema "+ yytext());
    lista.add("Token DEFINE_END, encontrado Lexema "+ yytext());
            }
          // fall through
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
